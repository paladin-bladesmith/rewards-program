/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { PALADIN_REWARDS_PROGRAM_ADDRESS } from '../programs';

/** IncorrectMintAuthority: Incorrect mint authority */
export const PALADIN_REWARDS_ERROR__INCORRECT_MINT_AUTHORITY = 0x0; // 0
/** IncorrectTransferHookProgramId: Incorrect transfer hook program ID */
export const PALADIN_REWARDS_ERROR__INCORRECT_TRANSFER_HOOK_PROGRAM_ID = 0x1; // 1
/** IncorrectHolderRewardsPoolAddress: Incorrect holder rewards pool address */
export const PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_POOL_ADDRESS = 0x2; // 2
/** IncorrectExtraMetasAddress: Incorrect extra metas address */
export const PALADIN_REWARDS_ERROR__INCORRECT_EXTRA_METAS_ADDRESS = 0x3; // 3
/** IncorrectHolderRewardsAddress: Incorrect holder rewards address */
export const PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_ADDRESS = 0x4; // 4
/** TokenAccountMintMismatch: Token account mint mismatch */
export const PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH = 0x5; // 5

export type PaladinRewardsError =
  | typeof PALADIN_REWARDS_ERROR__INCORRECT_EXTRA_METAS_ADDRESS
  | typeof PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_ADDRESS
  | typeof PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_POOL_ADDRESS
  | typeof PALADIN_REWARDS_ERROR__INCORRECT_MINT_AUTHORITY
  | typeof PALADIN_REWARDS_ERROR__INCORRECT_TRANSFER_HOOK_PROGRAM_ID
  | typeof PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH;

let paladinRewardsErrorMessages:
  | Record<PaladinRewardsError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  paladinRewardsErrorMessages = {
    [PALADIN_REWARDS_ERROR__INCORRECT_EXTRA_METAS_ADDRESS]: `Incorrect extra metas address`,
    [PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_ADDRESS]: `Incorrect holder rewards address`,
    [PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_POOL_ADDRESS]: `Incorrect holder rewards pool address`,
    [PALADIN_REWARDS_ERROR__INCORRECT_MINT_AUTHORITY]: `Incorrect mint authority`,
    [PALADIN_REWARDS_ERROR__INCORRECT_TRANSFER_HOOK_PROGRAM_ID]: `Incorrect transfer hook program ID`,
    [PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH]: `Token account mint mismatch`,
  };
}

export function getPaladinRewardsErrorMessage(
  code: PaladinRewardsError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (paladinRewardsErrorMessages as Record<PaladinRewardsError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isPaladinRewardsError<
  TProgramErrorCode extends PaladinRewardsError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    PALADIN_REWARDS_PROGRAM_ADDRESS,
    code
  );
}
