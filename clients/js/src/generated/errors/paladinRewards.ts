/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { PALADIN_REWARDS_PROGRAM_ADDRESS } from '../programs';

/** IncorrectHolderRewardsPoolAddress: Incorrect holder rewards pool address */
export const PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_POOL_ADDRESS = 0x0; // 0
/** IncorrectHolderRewardsAddress: Incorrect holder rewards address */
export const PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_ADDRESS = 0x1; // 1
/** TokenAccountMintMismatch: Token account mint mismatch */
export const PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH = 0x2; // 2
/** CloseWithUnclaimedRewards: Holder rewards has unclaimed rewards */
export const PALADIN_REWARDS_ERROR__CLOSE_WITH_UNCLAIMED_REWARDS = 0x3; // 3
/** InvalidClosingBalance: Cannot close holder rewards with current balance */
export const PALADIN_REWARDS_ERROR__INVALID_CLOSING_BALANCE = 0x4; // 4
/** OwnerNotSigner: Owner is not the signer */
export const PALADIN_REWARDS_ERROR__OWNER_NOT_SIGNER = 0x5; // 5
/** NotOwnerTokenAccount: Signer not owner of token account */
export const PALADIN_REWARDS_ERROR__NOT_OWNER_TOKEN_ACCOUNT = 0x6; // 6
/** RewardsExcessPoolBalance: Rewards amount exceeds pool balance */
export const PALADIN_REWARDS_ERROR__REWARDS_EXCESS_POOL_BALANCE = 0x7; // 7
/** CloseWithDepositedTokens: Holder rewards has deposited tokens */
export const PALADIN_REWARDS_ERROR__CLOSE_WITH_DEPOSITED_TOKENS = 0x8; // 8
/** NoDepositedTokensToWithdraw: Holder doesn't have any deposited tokens to withdraw */
export const PALADIN_REWARDS_ERROR__NO_DEPOSITED_TOKENS_TO_WITHDRAW = 0x9; // 9
/** WithdrawExceedsPoolBalance: Pool doesn't have enough balance to withdraw */
export const PALADIN_REWARDS_ERROR__WITHDRAW_EXCEEDS_POOL_BALANCE = 0xa; // 10
/** TokenAccountOwnerMissmatch: Token account owner mismatch */
export const PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_OWNER_MISSMATCH = 0xb; // 11
/** TokenAccountFrozen: Token account is frozen */
export const PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_FROZEN = 0xc; // 12
/** NotEnoughTokenToDeposit: Owner doesn'thave enough tokens to deposit */
export const PALADIN_REWARDS_ERROR__NOT_ENOUGH_TOKEN_TO_DEPOSIT = 0xd; // 13
/** WithdrawExceedsDeposited: Withdraw amount exceeds deposited */
export const PALADIN_REWARDS_ERROR__WITHDRAW_EXCEEDS_DEPOSITED = 0xe; // 14
/** DunaDocumentNotInitialized: DUNA document is not initialized */
export const PALADIN_REWARDS_ERROR__DUNA_DOCUMENT_NOT_INITIALIZED = 0xf; // 15
/** InvalidDunaPdaSeeds: DUNA PDA invalid seeds */
export const PALADIN_REWARDS_ERROR__INVALID_DUNA_PDA_SEEDS = 0x10; // 16

export type PaladinRewardsError =
  | typeof PALADIN_REWARDS_ERROR__CLOSE_WITH_DEPOSITED_TOKENS
  | typeof PALADIN_REWARDS_ERROR__CLOSE_WITH_UNCLAIMED_REWARDS
  | typeof PALADIN_REWARDS_ERROR__DUNA_DOCUMENT_NOT_INITIALIZED
  | typeof PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_ADDRESS
  | typeof PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_POOL_ADDRESS
  | typeof PALADIN_REWARDS_ERROR__INVALID_CLOSING_BALANCE
  | typeof PALADIN_REWARDS_ERROR__INVALID_DUNA_PDA_SEEDS
  | typeof PALADIN_REWARDS_ERROR__NO_DEPOSITED_TOKENS_TO_WITHDRAW
  | typeof PALADIN_REWARDS_ERROR__NOT_ENOUGH_TOKEN_TO_DEPOSIT
  | typeof PALADIN_REWARDS_ERROR__NOT_OWNER_TOKEN_ACCOUNT
  | typeof PALADIN_REWARDS_ERROR__OWNER_NOT_SIGNER
  | typeof PALADIN_REWARDS_ERROR__REWARDS_EXCESS_POOL_BALANCE
  | typeof PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_FROZEN
  | typeof PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH
  | typeof PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_OWNER_MISSMATCH
  | typeof PALADIN_REWARDS_ERROR__WITHDRAW_EXCEEDS_DEPOSITED
  | typeof PALADIN_REWARDS_ERROR__WITHDRAW_EXCEEDS_POOL_BALANCE;

let paladinRewardsErrorMessages:
  | Record<PaladinRewardsError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  paladinRewardsErrorMessages = {
    [PALADIN_REWARDS_ERROR__CLOSE_WITH_DEPOSITED_TOKENS]: `Holder rewards has deposited tokens`,
    [PALADIN_REWARDS_ERROR__CLOSE_WITH_UNCLAIMED_REWARDS]: `Holder rewards has unclaimed rewards`,
    [PALADIN_REWARDS_ERROR__DUNA_DOCUMENT_NOT_INITIALIZED]: `DUNA document is not initialized`,
    [PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_ADDRESS]: `Incorrect holder rewards address`,
    [PALADIN_REWARDS_ERROR__INCORRECT_HOLDER_REWARDS_POOL_ADDRESS]: `Incorrect holder rewards pool address`,
    [PALADIN_REWARDS_ERROR__INVALID_CLOSING_BALANCE]: `Cannot close holder rewards with current balance`,
    [PALADIN_REWARDS_ERROR__INVALID_DUNA_PDA_SEEDS]: `DUNA PDA invalid seeds`,
    [PALADIN_REWARDS_ERROR__NO_DEPOSITED_TOKENS_TO_WITHDRAW]: `Holder doesn't have any deposited tokens to withdraw`,
    [PALADIN_REWARDS_ERROR__NOT_ENOUGH_TOKEN_TO_DEPOSIT]: `Owner doesn'thave enough tokens to deposit`,
    [PALADIN_REWARDS_ERROR__NOT_OWNER_TOKEN_ACCOUNT]: `Signer not owner of token account`,
    [PALADIN_REWARDS_ERROR__OWNER_NOT_SIGNER]: `Owner is not the signer`,
    [PALADIN_REWARDS_ERROR__REWARDS_EXCESS_POOL_BALANCE]: `Rewards amount exceeds pool balance`,
    [PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_FROZEN]: `Token account is frozen`,
    [PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_MINT_MISMATCH]: `Token account mint mismatch`,
    [PALADIN_REWARDS_ERROR__TOKEN_ACCOUNT_OWNER_MISSMATCH]: `Token account owner mismatch`,
    [PALADIN_REWARDS_ERROR__WITHDRAW_EXCEEDS_DEPOSITED]: `Withdraw amount exceeds deposited`,
    [PALADIN_REWARDS_ERROR__WITHDRAW_EXCEEDS_POOL_BALANCE]: `Pool doesn't have enough balance to withdraw`,
  };
}

export function getPaladinRewardsErrorMessage(
  code: PaladinRewardsError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (paladinRewardsErrorMessages as Record<PaladinRewardsError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isPaladinRewardsError<
  TProgramErrorCode extends PaladinRewardsError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    PALADIN_REWARDS_PROGRAM_ADDRESS,
    code
  );
}
