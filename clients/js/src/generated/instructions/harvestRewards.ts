/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { PALADIN_REWARDS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type HarvestRewardsInstruction<
  TProgram extends string = typeof PALADIN_REWARDS_PROGRAM_ADDRESS,
  TAccountHolderRewardsPool extends string | IAccountMeta<string> = string,
  TAccountHolderRewardsPoolTokenAccountInfo extends
    | string
    | IAccountMeta<string> = string,
  TAccountHolderRewards extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountHolderRewardsPool extends string
        ? WritableAccount<TAccountHolderRewardsPool>
        : TAccountHolderRewardsPool,
      TAccountHolderRewardsPoolTokenAccountInfo extends string
        ? ReadonlyAccount<TAccountHolderRewardsPoolTokenAccountInfo>
        : TAccountHolderRewardsPoolTokenAccountInfo,
      TAccountHolderRewards extends string
        ? WritableAccount<TAccountHolderRewards>
        : TAccountHolderRewards,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      ...TRemainingAccounts,
    ]
  >;

export type HarvestRewardsInstructionData = { discriminator: number };

export type HarvestRewardsInstructionDataArgs = {};

export function getHarvestRewardsInstructionDataEncoder(): Encoder<HarvestRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 2 })
  );
}

export function getHarvestRewardsInstructionDataDecoder(): Decoder<HarvestRewardsInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getHarvestRewardsInstructionDataCodec(): Codec<
  HarvestRewardsInstructionDataArgs,
  HarvestRewardsInstructionData
> {
  return combineCodec(
    getHarvestRewardsInstructionDataEncoder(),
    getHarvestRewardsInstructionDataDecoder()
  );
}

export type HarvestRewardsInput<
  TAccountHolderRewardsPool extends string = string,
  TAccountHolderRewardsPoolTokenAccountInfo extends string = string,
  TAccountHolderRewards extends string = string,
  TAccountMint extends string = string,
  TAccountOwner extends string = string,
> = {
  /** Holder rewards pool account. */
  holderRewardsPool: Address<TAccountHolderRewardsPool>;
  /** Holder rewards pool token account. */
  holderRewardsPoolTokenAccountInfo: Address<TAccountHolderRewardsPoolTokenAccountInfo>;
  /** Holder rewards account. */
  holderRewards: Address<TAccountHolderRewards>;
  /** Token mint. */
  mint: Address<TAccountMint>;
  /** owner of token account */
  owner: TransactionSigner<TAccountOwner>;
};

export function getHarvestRewardsInstruction<
  TAccountHolderRewardsPool extends string,
  TAccountHolderRewardsPoolTokenAccountInfo extends string,
  TAccountHolderRewards extends string,
  TAccountMint extends string,
  TAccountOwner extends string,
>(
  input: HarvestRewardsInput<
    TAccountHolderRewardsPool,
    TAccountHolderRewardsPoolTokenAccountInfo,
    TAccountHolderRewards,
    TAccountMint,
    TAccountOwner
  >
): HarvestRewardsInstruction<
  typeof PALADIN_REWARDS_PROGRAM_ADDRESS,
  TAccountHolderRewardsPool,
  TAccountHolderRewardsPoolTokenAccountInfo,
  TAccountHolderRewards,
  TAccountMint,
  TAccountOwner
> {
  // Program address.
  const programAddress = PALADIN_REWARDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    holderRewardsPool: {
      value: input.holderRewardsPool ?? null,
      isWritable: true,
    },
    holderRewardsPoolTokenAccountInfo: {
      value: input.holderRewardsPoolTokenAccountInfo ?? null,
      isWritable: false,
    },
    holderRewards: { value: input.holderRewards ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.holderRewardsPool),
      getAccountMeta(accounts.holderRewardsPoolTokenAccountInfo),
      getAccountMeta(accounts.holderRewards),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.owner),
    ],
    programAddress,
    data: getHarvestRewardsInstructionDataEncoder().encode({}),
  } as HarvestRewardsInstruction<
    typeof PALADIN_REWARDS_PROGRAM_ADDRESS,
    TAccountHolderRewardsPool,
    TAccountHolderRewardsPoolTokenAccountInfo,
    TAccountHolderRewards,
    TAccountMint,
    TAccountOwner
  >;

  return instruction;
}

export type ParsedHarvestRewardsInstruction<
  TProgram extends string = typeof PALADIN_REWARDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Holder rewards pool account. */
    holderRewardsPool: TAccountMetas[0];
    /** Holder rewards pool token account. */
    holderRewardsPoolTokenAccountInfo: TAccountMetas[1];
    /** Holder rewards account. */
    holderRewards: TAccountMetas[2];
    /** Token mint. */
    mint: TAccountMetas[3];
    /** owner of token account */
    owner: TAccountMetas[4];
  };
  data: HarvestRewardsInstructionData;
};

export function parseHarvestRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedHarvestRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      holderRewardsPool: getNextAccount(),
      holderRewardsPoolTokenAccountInfo: getNextAccount(),
      holderRewards: getNextAccount(),
      mint: getNextAccount(),
      owner: getNextAccount(),
    },
    data: getHarvestRewardsInstructionDataDecoder().decode(instruction.data),
  };
}
